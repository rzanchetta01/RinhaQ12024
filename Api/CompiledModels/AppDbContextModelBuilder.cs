// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Api.CompiledModels
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var client = ClientEntityType.Create(this);
            var transaction = TransactionEntityType.Create(this);

            TransactionEntityType.CreateForeignKey1(transaction, client);

            ClientEntityType.CreateAnnotations(client);
            TransactionEntityType.CreateAnnotations(transaction);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var client = FindEntityType("Api.Models.Client")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            client.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var apiModelsClientTableBase = new TableBase("Api.Models.Client", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", apiModelsClientTableBase);
            apiModelsClientTableBase.Columns.Add("Id", idColumnBase);
            var limiteColumnBase = new ColumnBase<ColumnMappingBase>("Limite", "integer", apiModelsClientTableBase);
            apiModelsClientTableBase.Columns.Add("Limite", limiteColumnBase);
            var saldoColumnBase = new ColumnBase<ColumnMappingBase>("Saldo", "integer", apiModelsClientTableBase);
            apiModelsClientTableBase.Columns.Add("Saldo", saldoColumnBase);
            relationalModel.DefaultTables.Add("Api.Models.Client", apiModelsClientTableBase);
            var apiModelsClientMappingBase = new TableMappingBase<ColumnMappingBase>(client, apiModelsClientTableBase, true);
            apiModelsClientTableBase.AddTypeMapping(apiModelsClientMappingBase, false);
            defaultTableMappings.Add(apiModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, client.FindProperty("Id")!, apiModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)limiteColumnBase, client.FindProperty("Limite")!, apiModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)saldoColumnBase, client.FindProperty("Saldo")!, apiModelsClientMappingBase);

            var tableMappings = new List<TableMapping>();
            client.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var clientsTable = new Table("Clients", null, relationalModel);
            var idColumn = new Column("Id", "integer", clientsTable);
            clientsTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var limiteColumn = new Column("Limite", "integer", clientsTable);
            clientsTable.Columns.Add("Limite", limiteColumn);
            var saldoColumn = new Column("Saldo", "integer", clientsTable);
            clientsTable.Columns.Add("Saldo", saldoColumn);
            var pK_Clients = new UniqueConstraint("PK_Clients", clientsTable, new[] { idColumn });
            clientsTable.PrimaryKey = pK_Clients;
            var pK_ClientsUc = RelationalModel.GetKey(this,
                "Api.Models.Client",
                new[] { "Id" });
            pK_Clients.MappedKeys.Add(pK_ClientsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClientsUc).Add(pK_Clients);
            clientsTable.UniqueConstraints.Add("PK_Clients", pK_Clients);
            relationalModel.Tables.Add(("Clients", null), clientsTable);
            var clientsTableMapping = new TableMapping(client, clientsTable, true);
            clientsTable.AddTypeMapping(clientsTableMapping, false);
            tableMappings.Add(clientsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, client.FindProperty("Id")!, clientsTableMapping);
            RelationalModel.CreateColumnMapping(limiteColumn, client.FindProperty("Limite")!, clientsTableMapping);
            RelationalModel.CreateColumnMapping(saldoColumn, client.FindProperty("Saldo")!, clientsTableMapping);

            var transaction = FindEntityType("Api.Models.Transaction")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            transaction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var apiModelsTransactionTableBase = new TableBase("Api.Models.Transaction", null, relationalModel);
            var descricaoColumnBase = new ColumnBase<ColumnMappingBase>("Descricao", "character varying(10)", apiModelsTransactionTableBase);
            apiModelsTransactionTableBase.Columns.Add("Descricao", descricaoColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", apiModelsTransactionTableBase);
            apiModelsTransactionTableBase.Columns.Add("Id", idColumnBase0);
            var idClienteColumnBase = new ColumnBase<ColumnMappingBase>("IdCliente", "integer", apiModelsTransactionTableBase)
            {
                IsNullable = true
            };
            apiModelsTransactionTableBase.Columns.Add("IdCliente", idClienteColumnBase);
            var realizada_emColumnBase = new ColumnBase<ColumnMappingBase>("Realizada_em", "timestamp with time zone", apiModelsTransactionTableBase);
            apiModelsTransactionTableBase.Columns.Add("Realizada_em", realizada_emColumnBase);
            var tipoColumnBase = new ColumnBase<ColumnMappingBase>("Tipo", "character(1)", apiModelsTransactionTableBase);
            apiModelsTransactionTableBase.Columns.Add("Tipo", tipoColumnBase);
            var valorColumnBase = new ColumnBase<ColumnMappingBase>("Valor", "integer", apiModelsTransactionTableBase);
            apiModelsTransactionTableBase.Columns.Add("Valor", valorColumnBase);
            relationalModel.DefaultTables.Add("Api.Models.Transaction", apiModelsTransactionTableBase);
            var apiModelsTransactionMappingBase = new TableMappingBase<ColumnMappingBase>(transaction, apiModelsTransactionTableBase, true);
            apiModelsTransactionTableBase.AddTypeMapping(apiModelsTransactionMappingBase, false);
            defaultTableMappings0.Add(apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, transaction.FindProperty("Id")!, apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descricaoColumnBase, transaction.FindProperty("Descricao")!, apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idClienteColumnBase, transaction.FindProperty("IdCliente")!, apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realizada_emColumnBase, transaction.FindProperty("Realizada_em")!, apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoColumnBase, transaction.FindProperty("Tipo")!, apiModelsTransactionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valorColumnBase, transaction.FindProperty("Valor")!, apiModelsTransactionMappingBase);

            var tableMappings0 = new List<TableMapping>();
            transaction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var transactionsTable = new Table("Transactions", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", transactionsTable);
            transactionsTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var descricaoColumn = new Column("Descricao", "character varying(10)", transactionsTable);
            transactionsTable.Columns.Add("Descricao", descricaoColumn);
            var idClienteColumn = new Column("IdCliente", "integer", transactionsTable)
            {
                IsNullable = true
            };
            transactionsTable.Columns.Add("IdCliente", idClienteColumn);
            var realizada_emColumn = new Column("Realizada_em", "timestamp with time zone", transactionsTable);
            transactionsTable.Columns.Add("Realizada_em", realizada_emColumn);
            var tipoColumn = new Column("Tipo", "character(1)", transactionsTable);
            transactionsTable.Columns.Add("Tipo", tipoColumn);
            var valorColumn = new Column("Valor", "integer", transactionsTable);
            transactionsTable.Columns.Add("Valor", valorColumn);
            var pK_Transactions = new UniqueConstraint("PK_Transactions", transactionsTable, new[] { idColumn0 });
            transactionsTable.PrimaryKey = pK_Transactions;
            var pK_TransactionsUc = RelationalModel.GetKey(this,
                "Api.Models.Transaction",
                new[] { "Id" });
            pK_Transactions.MappedKeys.Add(pK_TransactionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TransactionsUc).Add(pK_Transactions);
            transactionsTable.UniqueConstraints.Add("PK_Transactions", pK_Transactions);
            var iX_Transactions_IdCliente = new TableIndex(
            "IX_Transactions_IdCliente", transactionsTable, new[] { idClienteColumn }, false);
            var iX_Transactions_IdClienteIx = RelationalModel.GetIndex(this,
                "Api.Models.Transaction",
                new[] { "IdCliente" });
            iX_Transactions_IdCliente.MappedIndexes.Add(iX_Transactions_IdClienteIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Transactions_IdClienteIx).Add(iX_Transactions_IdCliente);
            transactionsTable.Indexes.Add("IX_Transactions_IdCliente", iX_Transactions_IdCliente);
            relationalModel.Tables.Add(("Transactions", null), transactionsTable);
            var transactionsTableMapping = new TableMapping(transaction, transactionsTable, true);
            transactionsTable.AddTypeMapping(transactionsTableMapping, false);
            tableMappings0.Add(transactionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, transaction.FindProperty("Id")!, transactionsTableMapping);
            RelationalModel.CreateColumnMapping(descricaoColumn, transaction.FindProperty("Descricao")!, transactionsTableMapping);
            RelationalModel.CreateColumnMapping(idClienteColumn, transaction.FindProperty("IdCliente")!, transactionsTableMapping);
            RelationalModel.CreateColumnMapping(realizada_emColumn, transaction.FindProperty("Realizada_em")!, transactionsTableMapping);
            RelationalModel.CreateColumnMapping(tipoColumn, transaction.FindProperty("Tipo")!, transactionsTableMapping);
            RelationalModel.CreateColumnMapping(valorColumn, transaction.FindProperty("Valor")!, transactionsTableMapping);
            var fK_Transactions_Clients_IdCliente = new ForeignKeyConstraint(
                "FK_Transactions_Clients_IdCliente", transactionsTable, clientsTable,
                new[] { idClienteColumn },
                clientsTable.FindUniqueConstraint("PK_Clients")!, ReferentialAction.NoAction);
            var fK_Transactions_Clients_IdClienteFk = RelationalModel.GetForeignKey(this,
                "Api.Models.Transaction",
                new[] { "IdCliente" },
                "Api.Models.Client",
                new[] { "Id" });
            fK_Transactions_Clients_IdCliente.MappedForeignKeys.Add(fK_Transactions_Clients_IdClienteFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Transactions_Clients_IdClienteFk).Add(fK_Transactions_Clients_IdCliente);
            transactionsTable.ForeignKeyConstraints.Add(fK_Transactions_Clients_IdCliente);
            clientsTable.ReferencingForeignKeyConstraints.Add(fK_Transactions_Clients_IdCliente);
            return relationalModel.MakeReadOnly();
        }
    }
}
